// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: pkg/protos/server.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EnergyMeterServiceClient is the client API for EnergyMeterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnergyMeterServiceClient interface {
	CreateEnergyMeter(ctx context.Context, in *CreateEnergyMeterDto, opts ...grpc.CallOption) (*EnergyMeterDto, error)
	CreateEnergyMeterBrand(ctx context.Context, in *CreateEnergyMeterBrandDto, opts ...grpc.CallOption) (*EnergyMeterBrandDto, error)
}

type energyMeterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnergyMeterServiceClient(cc grpc.ClientConnInterface) EnergyMeterServiceClient {
	return &energyMeterServiceClient{cc}
}

func (c *energyMeterServiceClient) CreateEnergyMeter(ctx context.Context, in *CreateEnergyMeterDto, opts ...grpc.CallOption) (*EnergyMeterDto, error) {
	out := new(EnergyMeterDto)
	err := c.cc.Invoke(ctx, "/EnergyMeterService/CreateEnergyMeter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *energyMeterServiceClient) CreateEnergyMeterBrand(ctx context.Context, in *CreateEnergyMeterBrandDto, opts ...grpc.CallOption) (*EnergyMeterBrandDto, error) {
	out := new(EnergyMeterBrandDto)
	err := c.cc.Invoke(ctx, "/EnergyMeterService/CreateEnergyMeterBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnergyMeterServiceServer is the server API for EnergyMeterService service.
// All implementations must embed UnimplementedEnergyMeterServiceServer
// for forward compatibility
type EnergyMeterServiceServer interface {
	CreateEnergyMeter(context.Context, *CreateEnergyMeterDto) (*EnergyMeterDto, error)
	CreateEnergyMeterBrand(context.Context, *CreateEnergyMeterBrandDto) (*EnergyMeterBrandDto, error)
	mustEmbedUnimplementedEnergyMeterServiceServer()
}

// UnimplementedEnergyMeterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEnergyMeterServiceServer struct {
}

func (UnimplementedEnergyMeterServiceServer) CreateEnergyMeter(context.Context, *CreateEnergyMeterDto) (*EnergyMeterDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnergyMeter not implemented")
}
func (UnimplementedEnergyMeterServiceServer) CreateEnergyMeterBrand(context.Context, *CreateEnergyMeterBrandDto) (*EnergyMeterBrandDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnergyMeterBrand not implemented")
}
func (UnimplementedEnergyMeterServiceServer) mustEmbedUnimplementedEnergyMeterServiceServer() {}

// UnsafeEnergyMeterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnergyMeterServiceServer will
// result in compilation errors.
type UnsafeEnergyMeterServiceServer interface {
	mustEmbedUnimplementedEnergyMeterServiceServer()
}

func RegisterEnergyMeterServiceServer(s grpc.ServiceRegistrar, srv EnergyMeterServiceServer) {
	s.RegisterService(&EnergyMeterService_ServiceDesc, srv)
}

func _EnergyMeterService_CreateEnergyMeter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEnergyMeterDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnergyMeterServiceServer).CreateEnergyMeter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EnergyMeterService/CreateEnergyMeter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnergyMeterServiceServer).CreateEnergyMeter(ctx, req.(*CreateEnergyMeterDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnergyMeterService_CreateEnergyMeterBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEnergyMeterBrandDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnergyMeterServiceServer).CreateEnergyMeterBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EnergyMeterService/CreateEnergyMeterBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnergyMeterServiceServer).CreateEnergyMeterBrand(ctx, req.(*CreateEnergyMeterBrandDto))
	}
	return interceptor(ctx, in, info, handler)
}

// EnergyMeterService_ServiceDesc is the grpc.ServiceDesc for EnergyMeterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnergyMeterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "EnergyMeterService",
	HandlerType: (*EnergyMeterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEnergyMeter",
			Handler:    _EnergyMeterService_CreateEnergyMeter_Handler,
		},
		{
			MethodName: "CreateEnergyMeterBrand",
			Handler:    _EnergyMeterService_CreateEnergyMeterBrand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/protos/server.proto",
}
